{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 馃惗馃惐 SVM Classifier: Dogs vs Cats (Kaggle Dataset)\n",
    "This notebook trains a Support Vector Machine (SVM) to classify cats and dogs using images from the Kaggle Dogs vs Cats dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 馃摝 Import libraries\n",
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 馃搧 Define image loading function\n",
    "IMG_SIZE = 64\n",
    "def load_images(folder):\n",
    "    data = []\n",
    "    for file in os.listdir(folder):\n",
    "        if file.endswith('.jpg'):\n",
    "            label = 0 if 'cat' in file else 1\n",
    "            path = os.path.join(folder, file)\n",
    "            img = cv2.imread(path)\n",
    "            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n",
    "            data.append([img.flatten(), label])\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 馃摜 Load dataset\n",
    "# Replace this path with your extracted dataset folder\n",
    "data = load_images('/path/to/train')\n",
    "X = np.array([i[0] for i in data])\n",
    "y = np.array([i[1] for i in data])\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 馃 Train SVM\n",
    "model = SVC(kernel='linear')\n",
    "model.fit(X_train, y_train)\n",
    "y_pred = model.predict(X_test)\n",
    "print("Accuracy:", accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 馃И Predict a single image\n",
    "def predict_image(img_path):\n",
    "    img = cv2.imread(img_path)\n",
    "    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE)).flatten().reshape(1, -1)\n",
    "    pred = model.predict(img)\n",
    "    return "Cat" if pred[0] == 0 else "Dog"\n",
    "# Example usage:\n",
    "# predict_image('/path/to/test/cat.1000.jpg')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
